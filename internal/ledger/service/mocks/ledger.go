// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "github.com/mavrk-mose/pay/internal/ledger/models"
)

// LedgerService is an autogenerated mock type for the LedgerService type
type LedgerService struct {
	mock.Mock
}

// GetTransactionByID provides a mock function with given fields: transactionID
func (_m *LedgerService) GetTransactionByID(transactionID string) (models.Transaction, error) {
	ret := _m.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Transaction, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Transaction); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordTransaction provides a mock function with given fields: ctx, txn
func (_m *LedgerService) RecordTransaction(ctx *gin.Context, txn models.Transaction) error {
	ret := _m.Called(ctx, txn)

	if len(ret) == 0 {
		panic("no return value specified for RecordTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, models.Transaction) error); ok {
		r0 = rf(ctx, txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLedgerService creates a new instance of LedgerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLedgerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LedgerService {
	mock := &LedgerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
