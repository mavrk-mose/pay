// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mavrk-mose/pay/internal/notification/models"
	mock "github.com/stretchr/testify/mock"

	usermodels "github.com/mavrk-mose/pay/internal/user/models"

	uuid "github.com/google/uuid"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

type NotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationService) EXPECT() *NotificationService_Expecter {
	return &NotificationService_Expecter{mock: &_m.Mock}
}

// FetchNotifications provides a mock function with given fields: userID, i, limit
func (_m *NotificationService) FetchNotifications(userID string, i int, limit int) ([]models.Notification, error) {
	ret := _m.Called(userID, i, limit)

	if len(ret) == 0 {
		panic("no return value specified for FetchNotifications")
	}

	var r0 []models.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]models.Notification, error)); ok {
		return rf(userID, i, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []models.Notification); ok {
		r0 = rf(userID, i, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(userID, i, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_FetchNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchNotifications'
type NotificationService_FetchNotifications_Call struct {
	*mock.Call
}

// FetchNotifications is a helper method to define mock.On call
//   - userID string
//   - i int
//   - limit int
func (_e *NotificationService_Expecter) FetchNotifications(userID interface{}, i interface{}, limit interface{}) *NotificationService_FetchNotifications_Call {
	return &NotificationService_FetchNotifications_Call{Call: _e.mock.On("FetchNotifications", userID, i, limit)}
}

func (_c *NotificationService_FetchNotifications_Call) Run(run func(userID string, i int, limit int)) *NotificationService_FetchNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *NotificationService_FetchNotifications_Call) Return(_a0 []models.Notification, _a1 error) *NotificationService_FetchNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_FetchNotifications_Call) RunAndReturn(run func(string, int, int) ([]models.Notification, error)) *NotificationService_FetchNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetTemplate provides a mock function with given fields: ctx, templateID
func (_m *NotificationService) GetTemplate(ctx context.Context, templateID string) (models.NotificationTemplate, error) {
	ret := _m.Called(ctx, templateID)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 models.NotificationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.NotificationTemplate, error)); ok {
		return rf(ctx, templateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.NotificationTemplate); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Get(0).(models.NotificationTemplate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationService_GetTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplate'
type NotificationService_GetTemplate_Call struct {
	*mock.Call
}

// GetTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
func (_e *NotificationService_Expecter) GetTemplate(ctx interface{}, templateID interface{}) *NotificationService_GetTemplate_Call {
	return &NotificationService_GetTemplate_Call{Call: _e.mock.On("GetTemplate", ctx, templateID)}
}

func (_c *NotificationService_GetTemplate_Call) Run(run func(ctx context.Context, templateID string)) *NotificationService_GetTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NotificationService_GetTemplate_Call) Return(_a0 models.NotificationTemplate, _a1 error) *NotificationService_GetTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationService_GetTemplate_Call) RunAndReturn(run func(context.Context, string) (models.NotificationTemplate, error)) *NotificationService_GetTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: ctx, user, channel, title, details
func (_m *NotificationService) SendNotification(ctx context.Context, user usermodels.User, channel string, title string, details map[string]string) error {
	ret := _m.Called(ctx, user, channel, title, details)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, usermodels.User, string, string, map[string]string) error); ok {
		r0 = rf(ctx, user, channel, title, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type NotificationService_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - user usermodels.User
//   - channel string
//   - title string
//   - details map[string]string
func (_e *NotificationService_Expecter) SendNotification(ctx interface{}, user interface{}, channel interface{}, title interface{}, details interface{}) *NotificationService_SendNotification_Call {
	return &NotificationService_SendNotification_Call{Call: _e.mock.On("SendNotification", ctx, user, channel, title, details)}
}

func (_c *NotificationService_SendNotification_Call) Run(run func(ctx context.Context, user usermodels.User, channel string, title string, details map[string]string)) *NotificationService_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usermodels.User), args[2].(string), args[3].(string), args[4].(map[string]string))
	})
	return _c
}

func (_c *NotificationService_SendNotification_Call) Return(_a0 error) *NotificationService_SendNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_SendNotification_Call) RunAndReturn(run func(context.Context, usermodels.User, string, string, map[string]string) error) *NotificationService_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// StoreNotification provides a mock function with given fields: ctx, notification
func (_m *NotificationService) StoreNotification(ctx context.Context, notification models.Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for StoreNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_StoreNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreNotification'
type NotificationService_StoreNotification_Call struct {
	*mock.Call
}

// StoreNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - notification models.Notification
func (_e *NotificationService_Expecter) StoreNotification(ctx interface{}, notification interface{}) *NotificationService_StoreNotification_Call {
	return &NotificationService_StoreNotification_Call{Call: _e.mock.On("StoreNotification", ctx, notification)}
}

func (_c *NotificationService_StoreNotification_Call) Run(run func(ctx context.Context, notification models.Notification)) *NotificationService_StoreNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Notification))
	})
	return _c
}

func (_c *NotificationService_StoreNotification_Call) Return(_a0 error) *NotificationService_StoreNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_StoreNotification_Call) RunAndReturn(run func(context.Context, models.Notification) error) *NotificationService_StoreNotification_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationAsRead provides a mock function with given fields: userID, notificationID
func (_m *NotificationService) UpdateNotificationAsRead(userID string, notificationID uuid.UUID) error {
	ret := _m.Called(userID, notificationID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) error); ok {
		r0 = rf(userID, notificationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationService_UpdateNotificationAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationAsRead'
type NotificationService_UpdateNotificationAsRead_Call struct {
	*mock.Call
}

// UpdateNotificationAsRead is a helper method to define mock.On call
//   - userID string
//   - notificationID uuid.UUID
func (_e *NotificationService_Expecter) UpdateNotificationAsRead(userID interface{}, notificationID interface{}) *NotificationService_UpdateNotificationAsRead_Call {
	return &NotificationService_UpdateNotificationAsRead_Call{Call: _e.mock.On("UpdateNotificationAsRead", userID, notificationID)}
}

func (_c *NotificationService_UpdateNotificationAsRead_Call) Run(run func(userID string, notificationID uuid.UUID)) *NotificationService_UpdateNotificationAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *NotificationService_UpdateNotificationAsRead_Call) Return(_a0 error) *NotificationService_UpdateNotificationAsRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationService_UpdateNotificationAsRead_Call) RunAndReturn(run func(string, uuid.UUID) error) *NotificationService_UpdateNotificationAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
