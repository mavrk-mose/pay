// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mavrk-mose/pay/internal/notification/models"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepo is an autogenerated mock type for the NotificationRepo type
type NotificationRepo struct {
	mock.Mock
}

// GetTemplate provides a mock function with given fields: ctx, templateID
func (_m *NotificationRepo) GetTemplate(ctx context.Context, templateID string) (models.NotificationTemplate, error) {
	ret := _m.Called(ctx, templateID)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 models.NotificationTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.NotificationTemplate, error)); ok {
		return rf(ctx, templateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.NotificationTemplate); ok {
		r0 = rf(ctx, templateID)
	} else {
		r0 = ret.Get(0).(models.NotificationTemplate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreNotification provides a mock function with given fields: ctx, notification
func (_m *NotificationRepo) StoreNotification(ctx context.Context, notification models.Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for StoreNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationRepo creates a new instance of NotificationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepo {
	mock := &NotificationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
