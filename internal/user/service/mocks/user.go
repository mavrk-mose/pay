// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	goth "github.com/markbates/goth"
	mock "github.com/stretchr/testify/mock"

	models "github.com/mavrk-mose/pay/internal/user/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// AssignRole provides a mock function with given fields: ctx, userID, role
func (_m *UserService) AssignRole(ctx context.Context, userID string, role string) error {
	ret := _m.Called(ctx, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BanUser provides a mock function with given fields: ctx, userID, reason
func (_m *UserService) BanUser(ctx context.Context, userID string, reason string) error {
	ret := _m.Called(ctx, userID, reason)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUserByID(ctx context.Context, userID string) (models.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, filter
func (_m *UserService) ListUsers(ctx context.Context, filter models.UserFilter) ([]models.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserFilter) ([]models.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserFilter) []models.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *UserService) RegisterUser(ctx context.Context, user goth.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goth.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goth.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goth.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeRole provides a mock function with given fields: ctx, userID, role
func (_m *UserService) RevokeRole(ctx context.Context, userID string, role string) error {
	ret := _m.Called(ctx, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbanUser provides a mock function with given fields: ctx, userID
func (_m *UserService) UnbanUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, userID, updates
func (_m *UserService) UpdateUser(ctx context.Context, userID string, updates models.UserUpdateRequest) error {
	ret := _m.Called(ctx, userID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UserUpdateRequest) error); ok {
		r0 = rf(ctx, userID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
