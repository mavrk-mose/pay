// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	goth "github.com/markbates/goth"
	mock "github.com/stretchr/testify/mock"

	models "github.com/mavrk-mose/pay/internal/user/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// AssignRole provides a mock function with given fields: ctx, userID, role
func (_m *UserService) AssignRole(ctx context.Context, userID string, role string) error {
	ret := _m.Called(ctx, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type UserService_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - role string
func (_e *UserService_Expecter) AssignRole(ctx interface{}, userID interface{}, role interface{}) *UserService_AssignRole_Call {
	return &UserService_AssignRole_Call{Call: _e.mock.On("AssignRole", ctx, userID, role)}
}

func (_c *UserService_AssignRole_Call) Run(run func(ctx context.Context, userID string, role string)) *UserService_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_AssignRole_Call) Return(_a0 error) *UserService_AssignRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_AssignRole_Call) RunAndReturn(run func(context.Context, string, string) error) *UserService_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// BanUser provides a mock function with given fields: ctx, userID, reason
func (_m *UserService) BanUser(ctx context.Context, userID string, reason string) error {
	ret := _m.Called(ctx, userID, reason)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_BanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUser'
type UserService_BanUser_Call struct {
	*mock.Call
}

// BanUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - reason string
func (_e *UserService_Expecter) BanUser(ctx interface{}, userID interface{}, reason interface{}) *UserService_BanUser_Call {
	return &UserService_BanUser_Call{Call: _e.mock.On("BanUser", ctx, userID, reason)}
}

func (_c *UserService_BanUser_Call) Run(run func(ctx context.Context, userID string, reason string)) *UserService_BanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_BanUser_Call) Return(_a0 error) *UserService_BanUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_BanUser_Call) RunAndReturn(run func(context.Context, string, string) error) *UserService_BanUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserService) GetUserByID(ctx context.Context, userID string) (models.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserService_Expecter) GetUserByID(ctx interface{}, userID interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, userID)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(ctx context.Context, userID string)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(_a0 models.User, _a1 error) *UserService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx, filter
func (_m *UserService) ListUsers(ctx context.Context, filter models.UserFilter) ([]models.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserFilter) ([]models.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserFilter) []models.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UserService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - filter models.UserFilter
func (_e *UserService_Expecter) ListUsers(ctx interface{}, filter interface{}) *UserService_ListUsers_Call {
	return &UserService_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, filter)}
}

func (_c *UserService_ListUsers_Call) Run(run func(ctx context.Context, filter models.UserFilter)) *UserService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserFilter))
	})
	return _c
}

func (_c *UserService_ListUsers_Call) Return(_a0 []models.User, _a1 error) *UserService_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ListUsers_Call) RunAndReturn(run func(context.Context, models.UserFilter) ([]models.User, error)) *UserService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *UserService) RegisterUser(ctx context.Context, user goth.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, goth.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, goth.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, goth.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user goth.User
func (_e *UserService_Expecter) RegisterUser(ctx interface{}, user interface{}) *UserService_RegisterUser_Call {
	return &UserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, user)}
}

func (_c *UserService_RegisterUser_Call) Run(run func(ctx context.Context, user goth.User)) *UserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(goth.User))
	})
	return _c
}

func (_c *UserService_RegisterUser_Call) Return(token string, err error) *UserService_RegisterUser_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *UserService_RegisterUser_Call) RunAndReturn(run func(context.Context, goth.User) (string, error)) *UserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRole provides a mock function with given fields: ctx, userID, role
func (_m *UserService) RevokeRole(ctx context.Context, userID string, role string) error {
	ret := _m.Called(ctx, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_RevokeRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRole'
type UserService_RevokeRole_Call struct {
	*mock.Call
}

// RevokeRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - role string
func (_e *UserService_Expecter) RevokeRole(ctx interface{}, userID interface{}, role interface{}) *UserService_RevokeRole_Call {
	return &UserService_RevokeRole_Call{Call: _e.mock.On("RevokeRole", ctx, userID, role)}
}

func (_c *UserService_RevokeRole_Call) Run(run func(ctx context.Context, userID string, role string)) *UserService_RevokeRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_RevokeRole_Call) Return(_a0 error) *UserService_RevokeRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_RevokeRole_Call) RunAndReturn(run func(context.Context, string, string) error) *UserService_RevokeRole_Call {
	_c.Call.Return(run)
	return _c
}

// UnbanUser provides a mock function with given fields: ctx, userID
func (_m *UserService) UnbanUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UnbanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbanUser'
type UserService_UnbanUser_Call struct {
	*mock.Call
}

// UnbanUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserService_Expecter) UnbanUser(ctx interface{}, userID interface{}) *UserService_UnbanUser_Call {
	return &UserService_UnbanUser_Call{Call: _e.mock.On("UnbanUser", ctx, userID)}
}

func (_c *UserService_UnbanUser_Call) Run(run func(ctx context.Context, userID string)) *UserService_UnbanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_UnbanUser_Call) Return(_a0 error) *UserService_UnbanUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UnbanUser_Call) RunAndReturn(run func(context.Context, string) error) *UserService_UnbanUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, userID, updates
func (_m *UserService) UpdateUser(ctx context.Context, userID string, updates models.UserUpdateRequest) error {
	ret := _m.Called(ctx, userID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.UserUpdateRequest) error); ok {
		r0 = rf(ctx, userID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - updates models.UserUpdateRequest
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, userID interface{}, updates interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, userID, updates)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, userID string, updates models.UserUpdateRequest)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.UserUpdateRequest))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(_a0 error) *UserService_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(context.Context, string, models.UserUpdateRequest) error) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
