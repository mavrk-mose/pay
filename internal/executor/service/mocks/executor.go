// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "github.com/mavrk-mose/pay/internal/payment/models"
	mock "github.com/stretchr/testify/mock"
)

// ExecutorService is an autogenerated mock type for the ExecutorService type
type ExecutorService struct {
	mock.Mock
}

type ExecutorService_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutorService) EXPECT() *ExecutorService_Expecter {
	return &ExecutorService_Expecter{mock: &_m.Mock}
}

// ExecutePayment provides a mock function with given fields: order
func (_m *ExecutorService) ExecutePayment(order models.PaymentIntent) (interface{}, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for ExecutePayment")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(models.PaymentIntent) (interface{}, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(models.PaymentIntent) interface{}); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(models.PaymentIntent) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutorService_ExecutePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecutePayment'
type ExecutorService_ExecutePayment_Call struct {
	*mock.Call
}

// ExecutePayment is a helper method to define mock.On call
//   - order models.PaymentIntent
func (_e *ExecutorService_Expecter) ExecutePayment(order interface{}) *ExecutorService_ExecutePayment_Call {
	return &ExecutorService_ExecutePayment_Call{Call: _e.mock.On("ExecutePayment", order)}
}

func (_c *ExecutorService_ExecutePayment_Call) Run(run func(order models.PaymentIntent)) *ExecutorService_ExecutePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.PaymentIntent))
	})
	return _c
}

func (_c *ExecutorService_ExecutePayment_Call) Return(_a0 interface{}, _a1 error) *ExecutorService_ExecutePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutorService_ExecutePayment_Call) RunAndReturn(run func(models.PaymentIntent) (interface{}, error)) *ExecutorService_ExecutePayment_Call {
	_c.Call.Return(run)
	return _c
}

// RecordPaymentOrder provides a mock function with given fields: order
func (_m *ExecutorService) RecordPaymentOrder(order models.PaymentIntent) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for RecordPaymentOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PaymentIntent) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecutorService_RecordPaymentOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordPaymentOrder'
type ExecutorService_RecordPaymentOrder_Call struct {
	*mock.Call
}

// RecordPaymentOrder is a helper method to define mock.On call
//   - order models.PaymentIntent
func (_e *ExecutorService_Expecter) RecordPaymentOrder(order interface{}) *ExecutorService_RecordPaymentOrder_Call {
	return &ExecutorService_RecordPaymentOrder_Call{Call: _e.mock.On("RecordPaymentOrder", order)}
}

func (_c *ExecutorService_RecordPaymentOrder_Call) Run(run func(order models.PaymentIntent)) *ExecutorService_RecordPaymentOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.PaymentIntent))
	})
	return _c
}

func (_c *ExecutorService_RecordPaymentOrder_Call) Return(_a0 error) *ExecutorService_RecordPaymentOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutorService_RecordPaymentOrder_Call) RunAndReturn(run func(models.PaymentIntent) error) *ExecutorService_RecordPaymentOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutorService creates a new instance of ExecutorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutorService {
	mock := &ExecutorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
