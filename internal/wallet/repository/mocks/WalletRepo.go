// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	wallet "github.com/mavrk-mose/pay/internal/wallet/models"
)

// WalletRepo is an autogenerated mock type for the WalletRepo type
type WalletRepo struct {
	mock.Mock
}

// CreateTransfer provides a mock function with given fields: ctx, transfer
func (_m *WalletRepo) CreateTransfer(ctx context.Context, transfer *wallet.TransferRequest) error {
	ret := _m.Called(ctx, transfer)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *wallet.TransferRequest) error); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWallet provides a mock function with given fields: ctx, _a1
func (_m *WalletRepo) CreateWallet(ctx context.Context, _a1 wallet.Wallet) (*wallet.Wallet, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 *wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, wallet.Wallet) (*wallet.Wallet, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, wallet.Wallet) *wallet.Wallet); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, wallet.Wallet) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Credit provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletRepo) Credit(ctx context.Context, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Credit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Debit provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletRepo) Debit(ctx context.Context, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Debit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *WalletRepo) GetBalance(ctx context.Context, userID string) (float64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, walletID
func (_m *WalletRepo) GetByID(ctx context.Context, walletID string) (wallet.Wallet, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (wallet.Wallet, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) wallet.Wallet); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWallets provides a mock function with given fields: ctx, userID
func (_m *WalletRepo) GetUserWallets(ctx context.Context, userID string) ([]wallet.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWallets")
	}

	var r0 []wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]wallet.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []wallet.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransferStatus provides a mock function with given fields: ctx, externalRef, status
func (_m *WalletRepo) UpdateTransferStatus(ctx context.Context, externalRef string, status string) error {
	ret := _m.Called(ctx, externalRef, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransferStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, externalRef, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, walletID, amount, currency
func (_m *WalletRepo) Withdraw(ctx context.Context, walletID uuid.UUID, amount float64, currency string) (string, error) {
	ret := _m.Called(ctx, walletID, amount, currency)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64, string) (string, error)); ok {
		return rf(ctx, walletID, amount, currency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64, string) string); ok {
		r0 = rf(ctx, walletID, amount, currency)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, float64, string) error); ok {
		r1 = rf(ctx, walletID, amount, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWalletRepo creates a new instance of WalletRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepo {
	mock := &WalletRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
