// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	wallet "github.com/mavrk-mose/pay/internal/wallet/models"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// CanWithdraw provides a mock function with given fields: request, i
func (_m *WalletService) CanWithdraw(request string, i int) (interface{}, error) {
	ret := _m.Called(request, i)

	if len(ret) == 0 {
		panic("no return value specified for CanWithdraw")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (interface{}, error)); ok {
		return rf(request, i)
	}
	if rf, ok := ret.Get(0).(func(string, int) interface{}); ok {
		r0 = rf(request, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(request, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) CreateWallet(ctx *gin.Context, req wallet.CreateWalletRequest) (wallet.Wallet, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.CreateWalletRequest) (wallet.Wallet, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.CreateWalletRequest) wallet.Wallet); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, wallet.CreateWalletRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreditWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) CreditWallet(ctx *gin.Context, req wallet.WalletTransactionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreditWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.WalletTransactionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DebitWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) DebitWallet(ctx *gin.Context, req wallet.WalletTransactionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DebitWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.WalletTransactionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWallet provides a mock function with given fields: c, walletID
func (_m *WalletService) DeleteWallet(c *gin.Context, walletID string) interface{} {
	ret := _m.Called(c, walletID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWallet")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) interface{}); ok {
		r0 = rf(c, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetBalance provides a mock function with given fields: ctx, walletID
func (_m *WalletService) GetBalance(ctx *gin.Context, walletID uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserWallets provides a mock function with given fields: ctx, id
func (_m *WalletService) GetUserWallets(ctx *gin.Context, id string) ([]wallet.Wallet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWallets")
	}

	var r0 []wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) ([]wallet.Wallet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) []wallet.Wallet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *WalletService) GetWallet(ctx *gin.Context, userID string) (wallet.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (wallet.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) wallet.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, req
func (_m *WalletService) Transfer(ctx *gin.Context, req wallet.TransferRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.TransferRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalance provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletService) UpdateBalance(ctx *gin.Context, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
