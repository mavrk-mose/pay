// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	wallet "github.com/mavrk-mose/pay/internal/wallet/models"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

type WalletService_Expecter struct {
	mock *mock.Mock
}

func (_m *WalletService) EXPECT() *WalletService_Expecter {
	return &WalletService_Expecter{mock: &_m.Mock}
}

// CanWithdraw provides a mock function with given fields: request, i
func (_m *WalletService) CanWithdraw(request string, i int) (interface{}, error) {
	ret := _m.Called(request, i)

	if len(ret) == 0 {
		panic("no return value specified for CanWithdraw")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (interface{}, error)); ok {
		return rf(request, i)
	}
	if rf, ok := ret.Get(0).(func(string, int) interface{}); ok {
		r0 = rf(request, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(request, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_CanWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanWithdraw'
type WalletService_CanWithdraw_Call struct {
	*mock.Call
}

// CanWithdraw is a helper method to define mock.On call
//   - request string
//   - i int
func (_e *WalletService_Expecter) CanWithdraw(request interface{}, i interface{}) *WalletService_CanWithdraw_Call {
	return &WalletService_CanWithdraw_Call{Call: _e.mock.On("CanWithdraw", request, i)}
}

func (_c *WalletService_CanWithdraw_Call) Run(run func(request string, i int)) *WalletService_CanWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *WalletService_CanWithdraw_Call) Return(_a0 interface{}, _a1 error) *WalletService_CanWithdraw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_CanWithdraw_Call) RunAndReturn(run func(string, int) (interface{}, error)) *WalletService_CanWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) CreateWallet(ctx *gin.Context, req wallet.CreateWalletRequest) (wallet.Wallet, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.CreateWalletRequest) (wallet.Wallet, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.CreateWalletRequest) wallet.Wallet); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, wallet.CreateWalletRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_CreateWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWallet'
type WalletService_CreateWallet_Call struct {
	*mock.Call
}

// CreateWallet is a helper method to define mock.On call
//   - ctx *gin.Context
//   - req wallet.CreateWalletRequest
func (_e *WalletService_Expecter) CreateWallet(ctx interface{}, req interface{}) *WalletService_CreateWallet_Call {
	return &WalletService_CreateWallet_Call{Call: _e.mock.On("CreateWallet", ctx, req)}
}

func (_c *WalletService_CreateWallet_Call) Run(run func(ctx *gin.Context, req wallet.CreateWalletRequest)) *WalletService_CreateWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(wallet.CreateWalletRequest))
	})
	return _c
}

func (_c *WalletService_CreateWallet_Call) Return(_a0 wallet.Wallet, _a1 error) *WalletService_CreateWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_CreateWallet_Call) RunAndReturn(run func(*gin.Context, wallet.CreateWalletRequest) (wallet.Wallet, error)) *WalletService_CreateWallet_Call {
	_c.Call.Return(run)
	return _c
}

// CreditWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) CreditWallet(ctx *gin.Context, req wallet.WalletTransactionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreditWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.WalletTransactionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_CreditWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreditWallet'
type WalletService_CreditWallet_Call struct {
	*mock.Call
}

// CreditWallet is a helper method to define mock.On call
//   - ctx *gin.Context
//   - req wallet.WalletTransactionRequest
func (_e *WalletService_Expecter) CreditWallet(ctx interface{}, req interface{}) *WalletService_CreditWallet_Call {
	return &WalletService_CreditWallet_Call{Call: _e.mock.On("CreditWallet", ctx, req)}
}

func (_c *WalletService_CreditWallet_Call) Run(run func(ctx *gin.Context, req wallet.WalletTransactionRequest)) *WalletService_CreditWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(wallet.WalletTransactionRequest))
	})
	return _c
}

func (_c *WalletService_CreditWallet_Call) Return(_a0 error) *WalletService_CreditWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_CreditWallet_Call) RunAndReturn(run func(*gin.Context, wallet.WalletTransactionRequest) error) *WalletService_CreditWallet_Call {
	_c.Call.Return(run)
	return _c
}

// DebitWallet provides a mock function with given fields: ctx, req
func (_m *WalletService) DebitWallet(ctx *gin.Context, req wallet.WalletTransactionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DebitWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.WalletTransactionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_DebitWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebitWallet'
type WalletService_DebitWallet_Call struct {
	*mock.Call
}

// DebitWallet is a helper method to define mock.On call
//   - ctx *gin.Context
//   - req wallet.WalletTransactionRequest
func (_e *WalletService_Expecter) DebitWallet(ctx interface{}, req interface{}) *WalletService_DebitWallet_Call {
	return &WalletService_DebitWallet_Call{Call: _e.mock.On("DebitWallet", ctx, req)}
}

func (_c *WalletService_DebitWallet_Call) Run(run func(ctx *gin.Context, req wallet.WalletTransactionRequest)) *WalletService_DebitWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(wallet.WalletTransactionRequest))
	})
	return _c
}

func (_c *WalletService_DebitWallet_Call) Return(_a0 error) *WalletService_DebitWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_DebitWallet_Call) RunAndReturn(run func(*gin.Context, wallet.WalletTransactionRequest) error) *WalletService_DebitWallet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWallet provides a mock function with given fields: c, walletID
func (_m *WalletService) DeleteWallet(c *gin.Context, walletID string) interface{} {
	ret := _m.Called(c, walletID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWallet")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) interface{}); ok {
		r0 = rf(c, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// WalletService_DeleteWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWallet'
type WalletService_DeleteWallet_Call struct {
	*mock.Call
}

// DeleteWallet is a helper method to define mock.On call
//   - c *gin.Context
//   - walletID string
func (_e *WalletService_Expecter) DeleteWallet(c interface{}, walletID interface{}) *WalletService_DeleteWallet_Call {
	return &WalletService_DeleteWallet_Call{Call: _e.mock.On("DeleteWallet", c, walletID)}
}

func (_c *WalletService_DeleteWallet_Call) Run(run func(c *gin.Context, walletID string)) *WalletService_DeleteWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string))
	})
	return _c
}

func (_c *WalletService_DeleteWallet_Call) Return(_a0 interface{}) *WalletService_DeleteWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_DeleteWallet_Call) RunAndReturn(run func(*gin.Context, string) interface{}) *WalletService_DeleteWallet_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, walletID
func (_m *WalletService) GetBalance(ctx *gin.Context, walletID uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type WalletService_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx *gin.Context
//   - walletID uuid.UUID
func (_e *WalletService_Expecter) GetBalance(ctx interface{}, walletID interface{}) *WalletService_GetBalance_Call {
	return &WalletService_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, walletID)}
}

func (_c *WalletService_GetBalance_Call) Run(run func(ctx *gin.Context, walletID uuid.UUID)) *WalletService_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WalletService_GetBalance_Call) Return(_a0 float64, _a1 error) *WalletService_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetBalance_Call) RunAndReturn(run func(*gin.Context, uuid.UUID) (float64, error)) *WalletService_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWallets provides a mock function with given fields: ctx, id
func (_m *WalletService) GetUserWallets(ctx *gin.Context, id string) ([]wallet.Wallet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWallets")
	}

	var r0 []wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) ([]wallet.Wallet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) []wallet.Wallet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetUserWallets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWallets'
type WalletService_GetUserWallets_Call struct {
	*mock.Call
}

// GetUserWallets is a helper method to define mock.On call
//   - ctx *gin.Context
//   - id string
func (_e *WalletService_Expecter) GetUserWallets(ctx interface{}, id interface{}) *WalletService_GetUserWallets_Call {
	return &WalletService_GetUserWallets_Call{Call: _e.mock.On("GetUserWallets", ctx, id)}
}

func (_c *WalletService_GetUserWallets_Call) Run(run func(ctx *gin.Context, id string)) *WalletService_GetUserWallets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string))
	})
	return _c
}

func (_c *WalletService_GetUserWallets_Call) Return(_a0 []wallet.Wallet, _a1 error) *WalletService_GetUserWallets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetUserWallets_Call) RunAndReturn(run func(*gin.Context, string) ([]wallet.Wallet, error)) *WalletService_GetUserWallets_Call {
	_c.Call.Return(run)
	return _c
}

// GetWallet provides a mock function with given fields: ctx, userID
func (_m *WalletService) GetWallet(ctx *gin.Context, userID string) (wallet.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string) (wallet.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string) wallet.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWallet'
type WalletService_GetWallet_Call struct {
	*mock.Call
}

// GetWallet is a helper method to define mock.On call
//   - ctx *gin.Context
//   - userID string
func (_e *WalletService_Expecter) GetWallet(ctx interface{}, userID interface{}) *WalletService_GetWallet_Call {
	return &WalletService_GetWallet_Call{Call: _e.mock.On("GetWallet", ctx, userID)}
}

func (_c *WalletService_GetWallet_Call) Run(run func(ctx *gin.Context, userID string)) *WalletService_GetWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(string))
	})
	return _c
}

func (_c *WalletService_GetWallet_Call) Return(_a0 wallet.Wallet, _a1 error) *WalletService_GetWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetWallet_Call) RunAndReturn(run func(*gin.Context, string) (wallet.Wallet, error)) *WalletService_GetWallet_Call {
	_c.Call.Return(run)
	return _c
}

// Transfer provides a mock function with given fields: ctx, req
func (_m *WalletService) Transfer(ctx *gin.Context, req wallet.TransferRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, wallet.TransferRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_Transfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transfer'
type WalletService_Transfer_Call struct {
	*mock.Call
}

// Transfer is a helper method to define mock.On call
//   - ctx *gin.Context
//   - req wallet.TransferRequest
func (_e *WalletService_Expecter) Transfer(ctx interface{}, req interface{}) *WalletService_Transfer_Call {
	return &WalletService_Transfer_Call{Call: _e.mock.On("Transfer", ctx, req)}
}

func (_c *WalletService_Transfer_Call) Run(run func(ctx *gin.Context, req wallet.TransferRequest)) *WalletService_Transfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(wallet.TransferRequest))
	})
	return _c
}

func (_c *WalletService_Transfer_Call) Return(_a0 error) *WalletService_Transfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_Transfer_Call) RunAndReturn(run func(*gin.Context, wallet.TransferRequest) error) *WalletService_Transfer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function with given fields: ctx, walletID, amount
func (_m *WalletService) UpdateBalance(ctx *gin.Context, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(ctx, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, uuid.UUID, float64) error); ok {
		r0 = rf(ctx, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type WalletService_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - ctx *gin.Context
//   - walletID uuid.UUID
//   - amount float64
func (_e *WalletService_Expecter) UpdateBalance(ctx interface{}, walletID interface{}, amount interface{}) *WalletService_UpdateBalance_Call {
	return &WalletService_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", ctx, walletID, amount)}
}

func (_c *WalletService_UpdateBalance_Call) Run(run func(ctx *gin.Context, walletID uuid.UUID, amount float64)) *WalletService_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *WalletService_UpdateBalance_Call) Return(_a0 error) *WalletService_UpdateBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_UpdateBalance_Call) RunAndReturn(run func(*gin.Context, uuid.UUID, float64) error) *WalletService_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
