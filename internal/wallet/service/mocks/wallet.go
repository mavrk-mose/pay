// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	uuid "github.com/google/uuid"

	wallet "github.com/mavrk-mose/pay/internal/wallet/models"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

type WalletService_Expecter struct {
	mock *mock.Mock
}

func (_m *WalletService) EXPECT() *WalletService_Expecter {
	return &WalletService_Expecter{mock: &_m.Mock}
}

// CreateTransfer provides a mock function with given fields: ctx, transfer
func (_m *WalletService) CreateTransfer(ctx context.Context, transfer *wallet.TransferRequest) error {
	ret := _m.Called(ctx, transfer)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *wallet.TransferRequest) error); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type WalletService_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - transfer *wallet.TransferRequest
func (_e *WalletService_Expecter) CreateTransfer(ctx interface{}, transfer interface{}) *WalletService_CreateTransfer_Call {
	return &WalletService_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", ctx, transfer)}
}

func (_c *WalletService_CreateTransfer_Call) Run(run func(ctx context.Context, transfer *wallet.TransferRequest)) *WalletService_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*wallet.TransferRequest))
	})
	return _c
}

func (_c *WalletService_CreateTransfer_Call) Return(_a0 error) *WalletService_CreateTransfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_CreateTransfer_Call) RunAndReturn(run func(context.Context, *wallet.TransferRequest) error) *WalletService_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWallet provides a mock function with given fields: ctx, _a1
func (_m *WalletService) CreateWallet(ctx context.Context, _a1 *wallet.Wallet) (*wallet.Wallet, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 *wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *wallet.Wallet) (*wallet.Wallet, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *wallet.Wallet) *wallet.Wallet); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *wallet.Wallet) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_CreateWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWallet'
type WalletService_CreateWallet_Call struct {
	*mock.Call
}

// CreateWallet is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *wallet.Wallet
func (_e *WalletService_Expecter) CreateWallet(ctx interface{}, _a1 interface{}) *WalletService_CreateWallet_Call {
	return &WalletService_CreateWallet_Call{Call: _e.mock.On("CreateWallet", ctx, _a1)}
}

func (_c *WalletService_CreateWallet_Call) Run(run func(ctx context.Context, _a1 *wallet.Wallet)) *WalletService_CreateWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*wallet.Wallet))
	})
	return _c
}

func (_c *WalletService_CreateWallet_Call) Return(_a0 *wallet.Wallet, _a1 error) *WalletService_CreateWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_CreateWallet_Call) RunAndReturn(run func(context.Context, *wallet.Wallet) (*wallet.Wallet, error)) *WalletService_CreateWallet_Call {
	_c.Call.Return(run)
	return _c
}

// Credit provides a mock function with given fields: txn, walletID, amount
func (_m *WalletService) Credit(txn *sqlx.Tx, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(txn, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Credit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, uuid.UUID, float64) error); ok {
		r0 = rf(txn, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_Credit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Credit'
type WalletService_Credit_Call struct {
	*mock.Call
}

// Credit is a helper method to define mock.On call
//   - txn *sqlx.Tx
//   - walletID uuid.UUID
//   - amount float64
func (_e *WalletService_Expecter) Credit(txn interface{}, walletID interface{}, amount interface{}) *WalletService_Credit_Call {
	return &WalletService_Credit_Call{Call: _e.mock.On("Credit", txn, walletID, amount)}
}

func (_c *WalletService_Credit_Call) Run(run func(txn *sqlx.Tx, walletID uuid.UUID, amount float64)) *WalletService_Credit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sqlx.Tx), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *WalletService_Credit_Call) Return(_a0 error) *WalletService_Credit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_Credit_Call) RunAndReturn(run func(*sqlx.Tx, uuid.UUID, float64) error) *WalletService_Credit_Call {
	_c.Call.Return(run)
	return _c
}

// Debit provides a mock function with given fields: txn, walletID, amount
func (_m *WalletService) Debit(txn *sqlx.Tx, walletID uuid.UUID, amount float64) error {
	ret := _m.Called(txn, walletID, amount)

	if len(ret) == 0 {
		panic("no return value specified for Debit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, uuid.UUID, float64) error); ok {
		r0 = rf(txn, walletID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_Debit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debit'
type WalletService_Debit_Call struct {
	*mock.Call
}

// Debit is a helper method to define mock.On call
//   - txn *sqlx.Tx
//   - walletID uuid.UUID
//   - amount float64
func (_e *WalletService_Expecter) Debit(txn interface{}, walletID interface{}, amount interface{}) *WalletService_Debit_Call {
	return &WalletService_Debit_Call{Call: _e.mock.On("Debit", txn, walletID, amount)}
}

func (_c *WalletService_Debit_Call) Run(run func(txn *sqlx.Tx, walletID uuid.UUID, amount float64)) *WalletService_Debit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sqlx.Tx), args[1].(uuid.UUID), args[2].(float64))
	})
	return _c
}

func (_c *WalletService_Debit_Call) Return(_a0 error) *WalletService_Debit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_Debit_Call) RunAndReturn(run func(*sqlx.Tx, uuid.UUID, float64) error) *WalletService_Debit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWallet provides a mock function with given fields: c, walletID
func (_m *WalletService) DeleteWallet(c context.Context, walletID string) error {
	ret := _m.Called(c, walletID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWallet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, walletID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_DeleteWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWallet'
type WalletService_DeleteWallet_Call struct {
	*mock.Call
}

// DeleteWallet is a helper method to define mock.On call
//   - c context.Context
//   - walletID string
func (_e *WalletService_Expecter) DeleteWallet(c interface{}, walletID interface{}) *WalletService_DeleteWallet_Call {
	return &WalletService_DeleteWallet_Call{Call: _e.mock.On("DeleteWallet", c, walletID)}
}

func (_c *WalletService_DeleteWallet_Call) Run(run func(c context.Context, walletID string)) *WalletService_DeleteWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WalletService_DeleteWallet_Call) Return(_a0 error) *WalletService_DeleteWallet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_DeleteWallet_Call) RunAndReturn(run func(context.Context, string) error) *WalletService_DeleteWallet_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, userID
func (_m *WalletService) GetBalance(ctx context.Context, userID uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type WalletService_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *WalletService_Expecter) GetBalance(ctx interface{}, userID interface{}) *WalletService_GetBalance_Call {
	return &WalletService_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, userID)}
}

func (_c *WalletService_GetBalance_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *WalletService_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WalletService_GetBalance_Call) Return(_a0 float64, _a1 error) *WalletService_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetBalance_Call) RunAndReturn(run func(context.Context, uuid.UUID) (float64, error)) *WalletService_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, walletID
func (_m *WalletService) GetByID(ctx context.Context, walletID uuid.UUID) (wallet.Wallet, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (wallet.Wallet, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) wallet.Wallet); ok {
		r0 = rf(ctx, walletID)
	} else {
		r0 = ret.Get(0).(wallet.Wallet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type WalletService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - walletID uuid.UUID
func (_e *WalletService_Expecter) GetByID(ctx interface{}, walletID interface{}) *WalletService_GetByID_Call {
	return &WalletService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, walletID)}
}

func (_c *WalletService_GetByID_Call) Run(run func(ctx context.Context, walletID uuid.UUID)) *WalletService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *WalletService_GetByID_Call) Return(_a0 wallet.Wallet, _a1 error) *WalletService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (wallet.Wallet, error)) *WalletService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWallets provides a mock function with given fields: ctx, userID
func (_m *WalletService) GetUserWallets(ctx context.Context, userID string) ([]wallet.Wallet, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserWallets")
	}

	var r0 []wallet.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]wallet.Wallet, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []wallet.Wallet); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletService_GetUserWallets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWallets'
type WalletService_GetUserWallets_Call struct {
	*mock.Call
}

// GetUserWallets is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *WalletService_Expecter) GetUserWallets(ctx interface{}, userID interface{}) *WalletService_GetUserWallets_Call {
	return &WalletService_GetUserWallets_Call{Call: _e.mock.On("GetUserWallets", ctx, userID)}
}

func (_c *WalletService_GetUserWallets_Call) Run(run func(ctx context.Context, userID string)) *WalletService_GetUserWallets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *WalletService_GetUserWallets_Call) Return(_a0 []wallet.Wallet, _a1 error) *WalletService_GetUserWallets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WalletService_GetUserWallets_Call) RunAndReturn(run func(context.Context, string) ([]wallet.Wallet, error)) *WalletService_GetUserWallets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransferStatus provides a mock function with given fields: ctx, externalRef, status
func (_m *WalletService) UpdateTransferStatus(ctx context.Context, externalRef string, status string) error {
	ret := _m.Called(ctx, externalRef, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransferStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, externalRef, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletService_UpdateTransferStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransferStatus'
type WalletService_UpdateTransferStatus_Call struct {
	*mock.Call
}

// UpdateTransferStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - externalRef string
//   - status string
func (_e *WalletService_Expecter) UpdateTransferStatus(ctx interface{}, externalRef interface{}, status interface{}) *WalletService_UpdateTransferStatus_Call {
	return &WalletService_UpdateTransferStatus_Call{Call: _e.mock.On("UpdateTransferStatus", ctx, externalRef, status)}
}

func (_c *WalletService_UpdateTransferStatus_Call) Run(run func(ctx context.Context, externalRef string, status string)) *WalletService_UpdateTransferStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WalletService_UpdateTransferStatus_Call) Return(_a0 error) *WalletService_UpdateTransferStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WalletService_UpdateTransferStatus_Call) RunAndReturn(run func(context.Context, string, string) error) *WalletService_UpdateTransferStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
