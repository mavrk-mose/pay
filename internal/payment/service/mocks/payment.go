// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "github.com/mavrk-mose/pay/internal/payment/models"

	time "time"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

type PaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentService) EXPECT() *PaymentService_Expecter {
	return &PaymentService_Expecter{mock: &_m.Mock}
}

// GetPaymentDetails provides a mock function with given fields: id
func (_m *PaymentService) GetPaymentDetails(id string) (models.PaymentIntent, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentDetails")
	}

	var r0 models.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.PaymentIntent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.PaymentIntent); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.PaymentIntent)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_GetPaymentDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentDetails'
type PaymentService_GetPaymentDetails_Call struct {
	*mock.Call
}

// GetPaymentDetails is a helper method to define mock.On call
//   - id string
func (_e *PaymentService_Expecter) GetPaymentDetails(id interface{}) *PaymentService_GetPaymentDetails_Call {
	return &PaymentService_GetPaymentDetails_Call{Call: _e.mock.On("GetPaymentDetails", id)}
}

func (_c *PaymentService_GetPaymentDetails_Call) Run(run func(id string)) *PaymentService_GetPaymentDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PaymentService_GetPaymentDetails_Call) Return(_a0 models.PaymentIntent, _a1 error) *PaymentService_GetPaymentDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentService_GetPaymentDetails_Call) RunAndReturn(run func(string) (models.PaymentIntent, error)) *PaymentService_GetPaymentDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentStatus provides a mock function with given fields: id
func (_m *PaymentService) GetPaymentStatus(id string) (models.PaymentStatus, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentStatus")
	}

	var r0 models.PaymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.PaymentStatus, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.PaymentStatus); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.PaymentStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_GetPaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentStatus'
type PaymentService_GetPaymentStatus_Call struct {
	*mock.Call
}

// GetPaymentStatus is a helper method to define mock.On call
//   - id string
func (_e *PaymentService_Expecter) GetPaymentStatus(id interface{}) *PaymentService_GetPaymentStatus_Call {
	return &PaymentService_GetPaymentStatus_Call{Call: _e.mock.On("GetPaymentStatus", id)}
}

func (_c *PaymentService_GetPaymentStatus_Call) Run(run func(id string)) *PaymentService_GetPaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PaymentService_GetPaymentStatus_Call) Return(_a0 models.PaymentStatus, _a1 error) *PaymentService_GetPaymentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentService_GetPaymentStatus_Call) RunAndReturn(run func(string) (models.PaymentStatus, error)) *PaymentService_GetPaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessPayment provides a mock function with given fields: ctx, req
func (_m *PaymentService) ProcessPayment(ctx *gin.Context, req models.PaymentIntent) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, models.PaymentIntent) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentService_ProcessPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPayment'
type PaymentService_ProcessPayment_Call struct {
	*mock.Call
}

// ProcessPayment is a helper method to define mock.On call
//   - ctx *gin.Context
//   - req models.PaymentIntent
func (_e *PaymentService_Expecter) ProcessPayment(ctx interface{}, req interface{}) *PaymentService_ProcessPayment_Call {
	return &PaymentService_ProcessPayment_Call{Call: _e.mock.On("ProcessPayment", ctx, req)}
}

func (_c *PaymentService_ProcessPayment_Call) Run(run func(ctx *gin.Context, req models.PaymentIntent)) *PaymentService_ProcessPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context), args[1].(models.PaymentIntent))
	})
	return _c
}

func (_c *PaymentService_ProcessPayment_Call) Return(_a0 error) *PaymentService_ProcessPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentService_ProcessPayment_Call) RunAndReturn(run func(*gin.Context, models.PaymentIntent) error) *PaymentService_ProcessPayment_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPaymentsByDateRange provides a mock function with given fields: id, startDate, endDate
func (_m *PaymentService) QueryPaymentsByDateRange(id string, startDate time.Time, endDate time.Time) ([]models.PaymentIntent, error) {
	ret := _m.Called(id, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for QueryPaymentsByDateRange")
	}

	var r0 []models.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) ([]models.PaymentIntent, error)); ok {
		return rf(id, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []models.PaymentIntent); ok {
		r0 = rf(id, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(id, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_QueryPaymentsByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPaymentsByDateRange'
type PaymentService_QueryPaymentsByDateRange_Call struct {
	*mock.Call
}

// QueryPaymentsByDateRange is a helper method to define mock.On call
//   - id string
//   - startDate time.Time
//   - endDate time.Time
func (_e *PaymentService_Expecter) QueryPaymentsByDateRange(id interface{}, startDate interface{}, endDate interface{}) *PaymentService_QueryPaymentsByDateRange_Call {
	return &PaymentService_QueryPaymentsByDateRange_Call{Call: _e.mock.On("QueryPaymentsByDateRange", id, startDate, endDate)}
}

func (_c *PaymentService_QueryPaymentsByDateRange_Call) Run(run func(id string, startDate time.Time, endDate time.Time)) *PaymentService_QueryPaymentsByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *PaymentService_QueryPaymentsByDateRange_Call) Return(_a0 []models.PaymentIntent, _a1 error) *PaymentService_QueryPaymentsByDateRange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentService_QueryPaymentsByDateRange_Call) RunAndReturn(run func(string, time.Time, time.Time) ([]models.PaymentIntent, error)) *PaymentService_QueryPaymentsByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPaymentsByStatus provides a mock function with given fields: id, status
func (_m *PaymentService) QueryPaymentsByStatus(id string, status models.PaymentStatus) ([]models.PaymentIntent, error) {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for QueryPaymentsByStatus")
	}

	var r0 []models.PaymentIntent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.PaymentStatus) ([]models.PaymentIntent, error)); ok {
		return rf(id, status)
	}
	if rf, ok := ret.Get(0).(func(string, models.PaymentStatus) []models.PaymentIntent); ok {
		r0 = rf(id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PaymentIntent)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.PaymentStatus) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentService_QueryPaymentsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPaymentsByStatus'
type PaymentService_QueryPaymentsByStatus_Call struct {
	*mock.Call
}

// QueryPaymentsByStatus is a helper method to define mock.On call
//   - id string
//   - status models.PaymentStatus
func (_e *PaymentService_Expecter) QueryPaymentsByStatus(id interface{}, status interface{}) *PaymentService_QueryPaymentsByStatus_Call {
	return &PaymentService_QueryPaymentsByStatus_Call{Call: _e.mock.On("QueryPaymentsByStatus", id, status)}
}

func (_c *PaymentService_QueryPaymentsByStatus_Call) Run(run func(id string, status models.PaymentStatus)) *PaymentService_QueryPaymentsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.PaymentStatus))
	})
	return _c
}

func (_c *PaymentService_QueryPaymentsByStatus_Call) Return(_a0 []models.PaymentIntent, _a1 error) *PaymentService_QueryPaymentsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentService_QueryPaymentsByStatus_Call) RunAndReturn(run func(string, models.PaymentStatus) ([]models.PaymentIntent, error)) *PaymentService_QueryPaymentsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaymentStatus provides a mock function with given fields: id, status
func (_m *PaymentService) UpdatePaymentStatus(id string, status models.PaymentStatus) error {
	ret := _m.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.PaymentStatus) error); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentService_UpdatePaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentStatus'
type PaymentService_UpdatePaymentStatus_Call struct {
	*mock.Call
}

// UpdatePaymentStatus is a helper method to define mock.On call
//   - id string
//   - status models.PaymentStatus
func (_e *PaymentService_Expecter) UpdatePaymentStatus(id interface{}, status interface{}) *PaymentService_UpdatePaymentStatus_Call {
	return &PaymentService_UpdatePaymentStatus_Call{Call: _e.mock.On("UpdatePaymentStatus", id, status)}
}

func (_c *PaymentService_UpdatePaymentStatus_Call) Run(run func(id string, status models.PaymentStatus)) *PaymentService_UpdatePaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.PaymentStatus))
	})
	return _c
}

func (_c *PaymentService_UpdatePaymentStatus_Call) Return(_a0 error) *PaymentService_UpdatePaymentStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentService_UpdatePaymentStatus_Call) RunAndReturn(run func(string, models.PaymentStatus) error) *PaymentService_UpdatePaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
